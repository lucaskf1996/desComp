--Setup:
    --Carrega 0 no registrador 0
    tmp() := LDI & "000" & '0' & x"00";
    --Carrega 0 nos LEDs
    tmp() := STA & "000" & '1' & x"00";
    tmp() := STA & "000" & '1' & x"01"; --led de limite atingido
    tmp() := STA & "000" & '1' & x"02"; --led de overflow
    --Carrega 0 nos HEXs
    tmp() := STA & "000" & '1' & x"20";
    tmp() := STA & "000" & '1' & x"21";
    tmp() := STA & "000" & '1' & x"22";
    tmp() := STA & "000" & '1' & x"23";
    tmp() := STA & "000" & '1' & x"24";
    tmp() := STA & "000" & '1' & x"25";
    --Carrega 0 para comparacao, unidades, dezenas, centenas, flag de inibir contagem, overflow, respectivamente.
    tmp() := STA & "000" & '0' & x"00"; --0 comparacao
    tmp() := STA & "000" & '0' & x"03"; --unidade
    tmp() := STA & "000" & '0' & x"04"; --dezena
    tmp() := STA & "000" & '0' & x"05"; --centena
    tmp() := STA & "000" & '0' & x"09"; --inibir contagem
    --tmp() := STA & "000" & '0' & x"0A"; --overflow
    --Carrega 1 para incremento, 10 para comparacao, valor limite para unidade, valor limite para dezena e valor limite para centena, respectivamente.
    tmp() := LDI & "000" & '0' & x"01"; 
    tmp() := STA & "000" & '0' & x"01"; --1 inc
    tmp() := LDI & "000" & '0' & x"0A"; 
    tmp() := STA & "000" & '0' & x"02"; --10 comparacao
    tmp() := LDI & "000" & '0' & x"09";  
    tmp() := STA & "000" & '0' & x"06"; --limite para unidade
    tmp() := STA & "000" & '0' & x"07"; --limite para dezena
    tmp() := STA & "000" & '0' & x"08"; --limite para centena
    --JUMP para rotina principal
    tmp() := JMP & "000" & '0' & x"XX"; --ajustar endereco


--Definicao de limites de contagem: --Verificar se tem há dados nos registradores.
    --Unidades
    tmp() := LDA & "001" & '1' & x"40"; --Carrega o acumulador com a leitura das chaves SW0 até SW7
    tmp() := LDA & "000" & '1' & x"61"; --Carrega o acumulador com a leitura do botão KEY1
    tmp() := CEQ & "000" & '0' & x"01"; --Compara com MEM[1]
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para as dezenas caso tenha apertado key(1)
    tmp() := JMP & "000" & '0' & x"XX"; --Volta para as unidades caso nao tenha apertado key(1)
    --Dezenas
    tmp() := STA & "001" & '0' & x"06"; --Salva o limite das unidades na RAM
    tmp() := LDA & "001" & '1' & x"40"; --Carrega o acumulador com a leitura das chaves SW0 até SW7
    tmp() := LDA & "000" & '1' & x"61"; --Carrega o acumulador com a leitura do botão KEY1
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para as dezenas caso tenha apertado key(1)
    tmp() := JMP & "000" & '0' & x"XX"; --Volta para as unidades caso nao tenha apertado key(1)
    --Centenas
    tmp() := STA & "001" & '0' & x"07"; --Salva o limite das dezenas na RAM
    tmp() := LDA & "001" & '1' & x"40"; --Carrega o acumulador com a leitura das chaves SW0 até SW7
    tmp() := LDA & "000" & '1' & x"61"; --Carrega o acumulador com a leitura do botão KEY1
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para as dezenas caso tenha apertado key(1)
    tmp() := JMP & "000" & '0' & x"XX"; --Volta para as unidades caso nao tenha apertado key(1)
    tmp() := STA & "001" & '0' & x"07"; --Salva o limite das centenas na RAM
    tmp() := RET & "000" & '0' & x"00"; --Retorna da funcao

--Loop principal:
    --Leitura do key(0)
    tmp() := LDA & "000" & '1' & x"60"; --Carrega o valor da chave no reg0
    tmp() := CEQ & "000" & '0' & x"00"; --Compara com MEM[0]
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para a verificacao do key(1) caso o botao nao tenha sido pressionado
    tmp() := JSR & "000" & '0' & x"XX"; --Pula para sub-rotina de incremento key(0)
    --Leitura do key(1)
    tmp() := LDA & "000" & '1' & x"61"; --Carrega o valor da chave no reg0
    tmp() := CEQ & "000" & '0' & x"00"; --Compara com MEM[0]
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para verificacao de limite caso o botao nao tenha sido pressionado
    tmp() := JSR & "000" & '0' & x"XX"; --Pula para sub-rotina de configuracao de limites 
    --Jump para sub-rotiina de verificacao de limites
    tmp() := JSR & "000" & '0' & x"XX"; --Pula para sub-rotina de verificacao de limites 
    --Leitura do FPGA_RESET
    tmp() := LDA & "000" & '1' & x"64"; --Carrega o valor da chave no reg0
    tmp() := CEQ & "000" & '0' & x"00"; --Compara com MEM[0]
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para o inicio do loop caso o botao nao tenha sido pressionado
    tmp() := JSR & "000" & '0' & x"XX"; --Pula para sub-rotina de reset
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para o inicio do loop caso o botao nao tenha sido pressionado

--Sub-rotina de incremento do contador:
    --Sub-rotina de incremento key(0)
    --tmp() := STA & "000" & '1' & x"FF"; --Limpa a leitura do botao
    --tmp() := LDA & "000" & '0' & x"03"; --Carrega o valor de MEM[3] (unidades)
    --tmp() := SOMA & "000" & '0' & x"01"; --Soma 1
    --tmp() := STA & "000" & '0' & x"03"; --Salva em MEM[3]
    --tmp() := RET & "000" & '0' & x"00"; --Retorna para o loop principal

--Deve comparar cada posição de memória do limite com a posição de memória da contagem atual:
    --Centenas
    tmp() := LDA & "000" & '0' & x"08"; --carrega limite da centena
    tmp() := CEQ & "000" & '0' & x"05"; --Compara valor da centena
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para verificacao de dezenas
    tmp() := RET & "000" & '0' & x"00"; --Volta para rotina principal

    --Dezenas
    tmp() := LDA & "000" & '0' & x"07"; --carrega limite da dezena
    tmp() := CEQ & "000" & '0' & x"04"; --Compara valor da dezena
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para verificacao de unidades
    tmp() := RET & "000" & '0' & x"00"; --Volta para as unidades caso nao seja

    --Unidades
    tmp() := LDA & "000" & '0' & x"06"; --carrega limite da unidade
    tmp() := CEQ & "000" & '0' & x"03"; --Compara valor da unidade
    tmp() := JEQ & "000" & '0' & x"XX"; --Limite atingido. Pula para ativacao de flags e leds
    tmp() := JMP & "000" & '0' & x"XX"; --Volta para as unidades caso nao seja


    -- Para as unidades de milhares;
    -- Para as dezenas de milhares;
    -- Para as centenas de milhares.

    -- Caso todas comparações resultem iguais, devemos:
    tmp() := LDI & "000" & '0' & x"01"; -- Carrega 1 no reg0
    tmp() := STA & "000" & '0' & x"09"; -- Ativa flag de inibir contagem
    tmp() := STA & "000" & '1' & x"01"; -- Acender o LED de **Limite Atingido**.
    tmp() := RET & "000" & '0' & x"00"; -- Retornar da sub-rotina.

Reinício de Contagem:
    tmp() := LDI & "000" & '0' & x"00"; --Carrega 0 no reg0
    tmp() := STA & "000" & '0' & x"03"; --zera unidade
    tmp() := STA & "000" & '0' & x"04"; --zera dezena
    tmp() := STA & "000" & '0' & x"05"; --zera centena
    tmp() := STA & "000" & '1' & x"20"; --zera HEX[0]
    tmp() := STA & "000" & '1' & x"21"; --zera HEX[1]
    tmp() := STA & "000" & '1' & x"22"; --zera HEX[2]
    tmp() := STA & "000" & '0' & x"09"; --zera flag de inibir contagem
    tmp() := STA & "000" & '1' & x"01"; --apaga led de limite de contagem
    tmp() := STA & "000" & '1' & x"02"; --apaga led de overflow
    tmp() := RET & "000" & '0' & x"00"; --Retorna da funcao

Incrementando Contagem:
    tmp() := STA & "000" & '1' & x"FF"; --Limpa a leitura do botao
    tmp() := LDA & "000" & '0' & x"09"; --Carrega valor da flag de inibir contagem
    tmp() := CEQ & "000" & '0' & x"00"; --Compara com 0
    tmp() := JEQ & "000" & '0' & x"XX"; --Continua para incrementar
    tmp() := RET & "000" & '0' & x"00"; --Retorna se a flag estiver ligada
    --Unidades
    tmp() := LDA & "000" & '0' & x"03"; --Carrega valor das Unidades
    tmp() := SOMA & "000" & '0' & x"01"; --Incrementa o valor de Unidades
    tmp() := CEQ & "000" & '0' & x"02"; --Compara com 10
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para colocar 0
    tmp() := STA & "000" & '0' & x"03"; --Guarda valor das unidades
    tmp() := STA & "000" & '1' & x"20"; --Coloca valor no HEX[0]
    tmp() := RET & "000" & '0' & x"00"; --Retorna da sub-rotina
    tmp() := LDI & "000" & '0' & x"00"; --Carrega 0 no reg0
    tmp() := STA & "000" & '0' & x"03"; --Guarda valor das unidades
    tmp() := STA & "000" & '1' & x"20"; --Coloca valor no HEX[0]
    --Dezenas
    tmp() := LDA & "000" & '0' & x"04"; --Carrega valor das Dezenas
    tmp() := SOMA & "000" & '0' & x"01"; --Incrementa o valor de Dezenas
    tmp() := CEQ & "000" & '0' & x"02"; --Compara com 10
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para colocar 0
    tmp() := STA & "000" & '0' & x"04"; --Guarda valor das Dezenas
    tmp() := STA & "000" & '1' & x"21"; --Coloca valor no HEX[1]
    tmp() := RET & "000" & '0' & x"00"; --Retorna da sub-rotina
    tmp() := LDI & "000" & '0' & x"00"; --Carrega 0 no reg0
    tmp() := STA & "000" & '0' & x"04"; --Guarda valor das Dezenas
    tmp() := STA & "000" & '1' & x"21"; --Coloca valor no HEX[1]
    --Centenas
    tmp() := LDA & "000" & '0' & x"05"; --Carrega valor das Centenas
    tmp() := SOMA & "000" & '0' & x"01"; --Incrementa o valor de Centenas
    tmp() := CEQ & "000" & '0' & x"02"; --Compara com 10
    tmp() := JEQ & "000" & '0' & x"XX"; --Pula para acionar overflow
    tmp() := STA & "000" & '0' & x"05"; --Guarda valor das Centenas
    tmp() := STA & "000" & '1' & x"22"; --Coloca valor no HEX[2]
    tmp() := RET & "000" & '0' & x"00"; --Retorna da sub-rotina
    tmp() := LDI & "000" & '0' & x"01"; --Carrega 1 para reg0
    tmp() := STA & "000" & '0' & x"09"; --inibir contagem
    --tmp() := STA & "000" & '0' & x"0A"; --overflow
    tmp() := STA & "000" & '1' & x"02"; --led de overflow
    tmp() := RET & "000" & '0' & x"00"; --Retorna da sub-rotina

